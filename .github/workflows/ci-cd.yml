name: CI/CD Pipeline
on:
  push:
    branches:
      - main
jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, mysqli
          ini-values: post_max_size=256M, upload_max_filesize=256M
      
      - name: Install Composer dependencies
        run: |
          if [ -f composer.json ]; then
            composer install --no-progress --prefer-dist
          else
            echo "No composer.json found, creating a basic one"
            echo '{
              "name": "your-vendor/contact-manager",
              "description": "Contact Manager Project using LAMP stack",
              "require": {
                "php": ">=8.1"
              }
            }' > composer.json
            composer install --no-progress --prefer-dist
          fi
      
      - name: Run tests
        run: |
          if [ -f phpunit.xml ]; then
            vendor/bin/phpunit --configuration phpunit.xml
          else
            echo "No PHPUnit config found, skipping tests."
          fi
  
  deploy:
    name: Deploy to DigitalOcean Droplet
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}
      
      # Extra verbose debugging for SSH issues
      - name: Setup SSH key with extensive debugging
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          echo "Adding key to SSH agent..."
          cat ~/.ssh/id_rsa | ssh-add -
          
          # Show key details for verification
          echo "SSH Key fingerprint (compare with authorized_keys on server):"
          ssh-keygen -l -f ~/.ssh/id_rsa
          
          # Try reading the public key directly
          echo "Public key derived from private key:"
          ssh-keygen -y -f ~/.ssh/id_rsa
          
          # Configure SSH for debugging
          echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null\n\tLogLevel DEBUG3\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config

      
      - name: Verify SSH connection
        run: ssh -vvv ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_IP }} 'echo "SSH connection successful"'
      
      - name: Sync files to server
        run: |
          rsync -az --delete \
            --exclude '.git/' \
            --exclude '.github/' \
            ./ ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_IP }}:/var/www/html/
      
      - name: Run remote deployment commands
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_IP }} '
            cd /var/www/html
            # install PHP dependencies on server if needed
            if [ -f composer.json ]; then
              composer install --no-dev --optimize-autoloader
            fi
            # run database migrations, clear caches, etc.
            if [ -f artisan ]; then
              php artisan migrate --force
              php artisan cache:clear
            fi
            # set proper permissions
            sudo chown -R www-data:www-data /var/www/html
            # restart Apache to pick up any new configs
            sudo systemctl restart apache2
          '
