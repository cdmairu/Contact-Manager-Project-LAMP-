name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, mysqli
          ini-values: post_max_size=256M, upload_max_filesize=256M

      - name: Install Composer dependencies
        run: composer install --no-progress --no-suggest --prefer-dist

      - name: Run tests
        run: |
          if [ -f phpunit.xml ]; then
            vendor/bin/phpunit --configuration phpunit.xml
          else
            echo "No PHPUnit config found, skipping tests."
          fi

  deploy:
    name: Deploy to DigitalOcean Droplet
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Sync files to server
        # using rsync for efficient file transfer; adjust excludes as needed
        run: |
          rsync -az --delete \
            --exclude '.git/' \
            --exclude '.github/' \
            ./ ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_IP }}:/var/www/html/

      - name: Run remote deployment commands
        uses: appleboy/ssh-action@v0.6.1
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # optional: disable host key checking
          # strict: false
          script: |
            cd /var/www/html
            # install PHP dependencies on server if needed
            if [ -f composer.json ]; then
              composer install --no-dev --optimize-autoloader
            fi
            # run database migrations, clear caches, etc.
            if [ -f artisan ]; then
              php artisan migrate --force
              php artisan cache:clear
            fi
            # restart Apache to pick up any new configs
            sudo systemctl restart apache2
